name: Check Set-Up & Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install linux dependencies
        run: sudo apt-get install -y clang libssl-dev llvm libudev-dev protobuf-compiler

      - name: Install Rust
        run: |
          rustup update stable --no-self-update
          # rustup toolchain install nightly
          # rustup target add wasm32-unknown-unknown --toolchain nightly
          rustup target add wasm32-unknown-unknown
      # Rust cache
      - uses: Swatinem/rust-cache@v2

      - name: Update Dependencies
        run: cargo update
        
      - name: Check Build
        run: |
          SKIP_WASM_BUILD=1 cargo check --release

      - name: Check Tests
        run: |
          SKIP_WASM_BUILD=1 cargo test --release
  
      - name: Run application
        run: |
          # Start the application in the background
          SKIP_WASM_BUILD=1 cargo run --release > kylix.log 2>&1 &
          APP_PID=$!

          # Wait for a few seconds to let the application start
          sleep 1200

          # Check the log file for a success message
          if grep -q "Running JSON-RPC server" kylix.log; then
            echo "Application started successfully"
          else
            echo "Application failed to start"
            cat kylix.log
            kill $APP_PID
            exit 1
          fi

      - name: Stop application
        if: always()
        run: |
          if [ -n "$APP_PID" ]; then
            kill $APP_PID
          fi
      # - name: Check Build for Benchmarking
      #   run: >
      #     pushd node &&
      #     cargo check --features=runtime-benchmarks --release
