searchState.loadedDescShard("lending", 0, "This type can be converted into and possibly from an …\nAccount Type Definition\nThe transaction birth block is ancient.\nAn arithmetic error.\nFungible Balance\nMeans of identifying one asset class from another.\nFungible Asset Id\nAn extrinsic with a Mandatory dispatch resulted in Error. …\nA bad origin.\nGeneral error to do with the transaction’s proofs (e.g. …\nThe sending address is disabled or known to be invalid.\nScalar type for representing balance of an account.\nNative Balance\nThe operation may be considered successful even if less …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nType alias for the <code>BlockNumber</code> associated type of system …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe call of the transaction is not expected.\nThe call to validate\nThe call type of the pallet.\nCould not lookup some information that is required to …\nFailed to lookup some data.\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nTrait for providing the ability to create new fungible …\nThis will be filled out by the <code>pallet</code> macro.\nAny other custom invalid validity that is not covered by …\nAny other custom unknown validity that is not covered by …\nPrecision of this fixed point implementation. It should be …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nderive <code>Default</code> but do no bound any generic. Docs are at …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nContains the error value\nContains the error value\nContains the error value\nThe error returned by <code>check_inherent</code>.\nThe operation should must either proceed either exactly …\nResources exhausted, e.g. attempt to read/write data which …\nThe transaction would exhaust the resources of current …\nWe don’t care if the account gets killed by this …\nTransaction has been received externally.\nSomething that implements a decimal fixed point number.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe operation should be forced to succeed if possible. …\nThe privilege with which a withdraw operation is conducted.\nGeneral error to do with the transaction not yet being …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nType alias for the <code>Header</code>.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe inherent identifier used by this inherent.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe type identifying for which type info is provided.\nTransaction is already included in block.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe underlying data type used for this fixed point number.\nTrait for providing balance-inspection access to a set of …\nThe transaction is invalid.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nTransaction is coming from a local source.\nThe maximal weight in all dimensions.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nA mandatory dispatch. These kinds of dispatch are always …\nAn extrinsic with a mandatory dispatch tried to be …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nA custom error in a module.\nTrait for providing a basic fungible asset.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nTransactor will NOT pay related fees.\nThere are no providers so the account cannot be created.\nNo validator found for the given unsigned transaction.\nA normal dispatch.\nContains the success value\nContains the success value\nContains the success value\nDefines a multiplicative identity element for <code>Self</code>.\nAn operational dispatch.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nType alias for the <code>Origin</code> associated type of system config.\nSome error occurred.\nA pallet identifier. These are per pallet and should be …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nGeneral error to do with the inability to pay some fees …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe operation should execute with regular privilege.\nThe precision required of an operation generally involving …\nThe mode by which we describe whether an operation should …\nThe account may not be killed and our provider reference …\nThe account may not be killed, but we don’t care if the …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nRoot origin is not allowed.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nIndicates if this fixed point implementation is signed or …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nGeneral error to do with the transaction being outdated …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nA return type.\nAn error to do with tokens.\nThere are too many consumers so the account cannot be …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe number of transactional layers has been reached, or we …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe type which is returned.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nSome resource (e.g. a preimage) is unavailable right now. …\nTransaction validity can’t be determined.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nDefinition of the Borrow struct and its properties for an …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nTransactor will pay related fees.\nDefines an additive identity element for <code>Self</code>.\nPrecision of this fixed point implementation.\nThe total amount of issuance in the system excluding those …\nAdd a value and return the result.\nConstant version of Add for <code>proof_size</code> component with u64.\nConstant version of Add for <code>ref_time</code> component with u64.\nReturns an array containing all dispatch classes.\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given item to the value in the storage.\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nReturns <code>true</code> if an <code>asset</code> exists.\nGet the balance of <code>who</code> which does not include funds which …\nGet the bound of the type in <code>usize</code>.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nThe build function puts initial <code>GenesisConfig</code> keys/values …\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturns <code>true</code> if the <code>asset</code> balance of <code>who</code> may be increased …\nReturns <code>Failed</code> if the <code>asset</code> balance of <code>who</code> may not be …\nReturns the smallest integer greater than or equal to a …\nCheck whether the given inherent is valid. Checking the …\nTry to increase <code>self</code> by <code>amount</code> via checked addition.\nAdds two numbers, checking for overflow. If overflow …\nChecked <code>Weight</code> addition. Computes <code>self + rhs</code>, returning …\nDivides two numbers, checking for underflow, overflow and …\nChecked <code>Weight</code> scalar division. Computes …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCalculates how many <code>other</code> fit into <code>self</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nMultiplies two numbers, checking for underflow or …\nChecked <code>Weight</code> scalar multiplication. Computes …\nChecked multiplication for integer type <code>N</code>. Equal to …\nTry to reduce <code>self</code> by <code>amount</code> via checked subtraction.\nDivide by another value with custom rounding, returning …\nSubtracts two numbers, checking for underflow. If …\nChecked <code>Weight</code> subtraction. Computes <code>self - rhs</code>, returning …\nExactly the same semantics as <code>Vec::clear</code>.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove all items from the map.\nAttempt to remove items from the map matching a <code>first_key</code> …\nAttempt to remove items from the map matching a <code>partial_key</code>…\nCombine two instances into one, as a best effort. This …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nDivide by another value, returning <code>None</code> in the case of an …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value with custom rounding, returning …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nReturn the count.\nThe key used to store the counter of the map.\nVersion of the crate containing the pallet.\nCreate a new fungible asset.\nCreate an inherent out of the given <code>InherentData</code>.\nReturns the current storage version as supported by the …\nAttempt to deserialise the value from input.\nAttempt to deserialize the value from input into a …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nConstant version of Div with u64.\nDivide by a value and return the result.\nExact same semantics as <code>Vec::drain</code>.\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map with first key <code>k1</code> and …\nRemove all elements from the map with prefix key <code>kp</code> and …\nConvert self to an owned vector.\nConvert self to a slice and append it to the destination.\nReturns the fixed encoded size of the type.\nCalculates the encoded size.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nEnsure that the origin <code>o</code> represents an unsigned extrinsic. …\nPerform the origin check.\nEnsure that the origin <code>o</code> represents the root. Returns <code>Ok</code> …\nEnsure that the origin <code>o</code> represents a signed extrinsic …\nEnsure that the origin <code>o</code> represents either a signed …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturns if the reason for the invalidity was block …\nReturns <code>true</code> if the reason for the error was block …\nDoes the value (explicitly) exist in storage?\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturns the largest integer less than or equal to a number.\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nReturns the fractional part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Weight</code> from the same weight for all parts.\nConvert from a <code>float</code> value.\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nBuilds this type from an integer number.\nCreate a new instance from the given <code>inner</code> value.\nCast mutable reference.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct <code>Weight</code> from weight parts, namely reference time …\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nConvert from a <code>Perbill</code> value.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nCalculate an approximation of a rational.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nCalculate an approximation of a rational with custom …\nCast reference.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCreates self from a <code>u32</code>.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturn the current value.\nReturn the current value.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the …\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the map.\nLoad the value from the provided storage instance.\nGet the storage version of the given pallet from the …\nReturns the data for the requested inherent.\nExactly the same semantics as <code>slice::get_mut</code>.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nGet the storage key.\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nIndex of the pallet as configured in the runtime.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nInitialize the counter with the actual number of items in …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nInteger division with another value, rounding down.\nInteger multiplication with another value, saturating at 1.\nRun integrity test.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an account ID. This is infallible, and may …\nAttempt to convert into a <code>PerThing</code>. This will always …\nConsumes <code>self</code> and returns the inner raw value.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturn the instance’s inner value.\nCast mutable reference.\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nCast reference.\nConvert this value amalgamated with the a secondary “sub…\nReturns true of this collection is full.\nReturn whether the call is an inherent call.\nDetermines whether this inherent is required in this block.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nChecks if the number is one.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nSee <code>PerThing::is_one</code>.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nSee <code>PerThing::is_zero</code>.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the map in no particular order.\nEnumerate all elements in the counted map after a …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all keys in the counted map.\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map in no particular …\nEnumerate all keys in the map in no particular order.\nEnumerate all keys in the map in no particular order.\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all keys in the map after a specified …\nEnumerate all keys in the map after a specified …\nExactly the same semantics as <code>slice::iter_mut</code>.\nEnumerate all elements in the map with first key <code>k1</code> in no …\nEnumerate all elements in the map with prefix key <code>kp</code> in no …\nEnumerate all elements in the map with first key <code>k1</code> after …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nIterate over values that share the first key.\nIterate over values that share the first key.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nIter over all value of the storage.\nClear the storage value.\nExactly the same semantics as <code>slice::last_mut</code>.\nGet the number of inherents in this instance\nTransaction longevity\nThe prefix used to generate the key of the map.\nGet the aggressive max of <code>self</code> and <code>other</code> weight.\nUpper bound, in bytes, of the maximum encoded size of this …\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key1</code> and <code>key2</code> from defunct …\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nGet the conservative min of <code>self</code> and <code>other</code> weight.\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nName of the Rust module containing the pallet.\nConstant version of Mul with u64.\nMultiply by a value and return the result.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_floor</code>.\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value\nMutate the value under a key. Deletes the item if mutated …\nMutate the value under the given keys. Deletes the item if …\nMutate the value under a key. Deletes the item if mutated …\nMutate the value under the given keys. Deletes the item if …\nMutate the value. Deletes the item if mutated to a <code>None</code>.\nMutate the value under a key iff it exists. Do nothing and …\nName of the pallet as configured in the runtime.\nNegate the value.\nCreate a new instance.\nCreate <code>Self</code> with no items.\nCreates a new instance of <code>Self</code>.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturns an array of all dispatch classes except <code>Mandatory</code>.\nImplementing this function on a module allows you to …\nReturns the on-chain storage version of the pallet as …\nThe block is being finalized. Implement to have something …\nThis will be run when the block is being finalized (before …\nThe block is being initialized. Implement to have …\nPerform a module upgrade.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSee <code>PerThing::one</code>\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nExactly the same semantics as <code>Vec::pop</code>.\nValidate the call right before dispatch.\nPriority of the transaction.\nReturn the storage size part of the weight.\nReturn a mutable reference to the storage size part of the …\nA flag indicating if the transaction should be propagated …\nProvided tags\nStore a value under this key into the provided storage …\nPut this storage version for the given pallet into the …\nPut data for an inherent into the internal storage.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nReturn the reference time part of the weight.\nReturn a mutable reference to the reference time part of …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nExactly the same semantics as <code>Vec::remove</code>.\nRemove the value under a key.\nRemove the value under the given keys.\nRemove the value under a key.\nRemove the value under the given keys.\nRemove all values in the map.\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values of the storage in the overlay and up to …\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values under <code>k1</code> in the overlay and up to <code>limit</code> …\nRemove all values starting with <code>partial_key</code> in the overlay …\nReplace the data for an inherent.\nTransaction dependencies\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nReturns the number rounded to the nearest integer. Rounds …\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nSaturating absolute value.\nIncrement <code>Weight</code> by <code>amount</code> via saturating addition.\nSaturating <code>Weight</code> addition. Computes <code>self + rhs</code>, …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating <code>Weight</code> scalar division. Computes …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates self from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nSaturating <code>Weight</code> scalar multiplication. Computes …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nSaturating <code>Weight</code> scalar exponentiation. Computes …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nReduce <code>Weight</code> by <code>amount</code> via saturating subtraction.\nSaturating <code>Weight</code> subtraction. Computes <code>self - rhs</code>, …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore a value under this key into the provided storage …\nSimple infallible function to force an account to have a …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSet the storage size part of the weight.\nSet the reference time part of the weight.\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nIf possible give a hint of expected size of the encoding.\nAttempt to skip the encoded value from input.\nMove the position of an item from one location to another …\nExactly the same semantics as <code>slice::sort</code>.\nExactly the same semantics as <code>slice::sort_by</code>.\nExactly the same semantics as <code>slice::sort_by_key</code>.\nTake the square root of a positive value.\nSee <code>PerThing::square</code>.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturns the storage key for a storage version.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturn the same error but without the attached message.\nSubtract a value and return the result.\nConstant version of Sub for <code>proof_size</code> component with u64.\nConstant version of Sub for <code>ref_time</code> component with u64.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nExactly the same semantics as <code>slice::swap_remove</code>.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake a value from storage, removing it afterwards.\nConvert into a <code>float</code> value.\nGet the total amount of funds whose ultimate bneficial …\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate a value from some previous type (<code>O</code>) to the …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nReturns the integer part.\nExactly the same semantics as <code>Vec::truncate</code>.\nConsume and truncate the vector <code>v</code> in order to create a new …\nTry to add some <code>other</code> weight while upholding the <code>limit</code>.\nExactly the same semantics as <code>Vec::append</code>, but returns an …\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nTry and append the given item to the value in the storage.\nExactly the same semantics as <code>Vec::extend</code>, but returns an …\nTry to convert an account ID into this type. Might not …\nTry to convert an account ID into this type. Might not …\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the double map.\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the map.\nTry to get the underlying value from the provided storage …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConvert into an account ID, checking that all bytes of the …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nSame as <code>into_sub_account_truncating</code>, but ensuring that all …\nConsumes self and mutates self via the given <code>mutate</code> …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the value if closure returns <code>Ok</code>\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the value if closure returns <code>Ok</code>. Deletes the item …\nPerform the origin check.\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nCompute the square root, rounding as desired. If it …\nReturns the static type identifier for <code>Self</code>.\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nConvert self to a slice and then invoke the given closure …\nReturn the validity of the call\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nReturns if the reason for the invalidity was a mandatory …\nReturns <code>true</code> if the reason for the error was it being a …\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nAutogenerated weights for pallet_template\n! # The Lending pallet of Kylix ! ! ## Overview ! ! The …\nPre-allocate <code>capacity</code> items in self.\nAllocate self with the maximum possible capacity.\nInitiate <code>ValidTransaction</code> builder object with a particular …\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nReturn a <code>Weight</code> where all fields are zero.\nSee <code>PerThing::zero</code>.\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nSpecial dust type which can be type-safely converted into …\nHandler for when an imbalance gets dropped. This could …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nConvert a <code>fungibles</code> trait implementation into a <code>fungible</code> …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing locks to …\nTrait for mutating a fungible asset which can be placed on …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nThe total amount of issuance in the system excluding those …\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\nAttempt to decrease the balance of <code>who</code> which is held for …\nReturns <code>true</code> if the balance of <code>who</code> may be increased by …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Success</code> if the balance of <code>who</code> may be decreased by …\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nPrevent the balance of the account of <code>who</code> from being …\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nSome something with the imbalance’s value which is being …\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Self::handle_dust</code>. …\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nRemove an existing lock.\nGet the total amount of funds whose ultimate beneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nTest the <code>burn_from</code> function for successfully burning …\nTest the <code>burn_from</code> function for handling insufficient …\nTest the <code>burn_from</code> function for successfully burning an …\nTest the can_deposit function for returning a minimum …\nTest the can_deposit function for returning an overflow …\nTest the can_deposit function for returning a success …\nTest the can_withdraw function for returning a low balance …\nTest the can_withdraw function for withdrawal resulting in …\nTest the can_withdraw function for returning a success …\nTest the <code>mint_into</code> function for handling balances below …\nTest the <code>mint_into</code> function for overflow prevention.\nTest the <code>mint_into</code> function for successful token minting.\nTest the reducible_balance function with …\nTest the reducible_balance function with …\nTest the <code>restore</code> function for handling restoration below …\nTest the <code>restore</code> function for handling balance overflow.\nTest the <code>restore</code> function for successful restoration.\nTest the set_balance function for successful burning.\nTest the set_balance function for successful minting.\nTest the <code>shelve</code> function for handling insufficient funds.\nTest the <code>shelve</code> function for successful shelving.\nTest the <code>transfer</code> function with <code>Preservation::Expendable</code> …\nTest the transfer function with Preservation::Expendable …\nTest the <code>transfer</code> function with <code>Preservation::Protect</code> and …\nTest the <code>transfer</code> function for a successful transfer.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing locks to …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nPrevent the balance of the account of <code>who</code> from being …\nPrevent actions which would reduce the balance of the …\nRemove an existing lock.\nTrait for slashing a fungible asset which can be place on …\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nMeans of identifying one asset class from another.\nScalar type for representing balance of an account.\nA fungible token class where any creation and deletion of …\nTrait for slashing a fungible asset which can be place on …\nTrait for providing the ability to create new fungible …\nImbalance implying that the total_issuance value is …\nImbalance implying that the total_issuance value is less …\nSimple handler for an imbalance drop which decreases the …\nTrait for providing the ability to destroy existing …\nSpecial dust type which can be type-safely converted into …\nHandler for when an imbalance gets dropped. This could …\nAn identifier for a freeze.\nAn imbalance in the system, representing a divergence of …\nSimple handler for an imbalance drop which increases the …\nTrait for providing balance-inspection access to a set of …\nInterface for enumerating assets in existence or owned by …\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for inspecting a fungible asset whose accounts …\nTrait for providing a basic fungible asset.\nTrait for introducing, altering and removing locks to …\nTrait for mutating a fungible asset which can be placed on …\nThe type for managing what happens when an instance of …\nThe type for managing what happens when an instance of <code>Debt</code>…\nAn identifier for a hold. Used for disambiguating …\nTrait for providing methods to swap between the chain’s …\nA fungible token class where the balance can be set …\nA fungible, holdable token class where the balance on hold …\nThe total amount of issuance in the system excluding those …\nInspect and Mutate traits for Asset approvals\nReturns <code>true</code> if an <code>asset</code> exists.\nReturns an iterator of the collections in existence.\nGet the balance of <code>who</code> which does not include funds which …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nAmount of funds on hold (for the given reason) of <code>who</code>.\nDecrease the balance of <code>who</code> by at least <code>amount</code>, possibly …\nAttempt to decrease the balance of <code>who</code> which is held for …\nReturns <code>true</code> if the <code>asset</code> balance of <code>who</code> may be increased …\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReturns <code>Failed</code> if the <code>asset</code> balance of <code>who</code> may not be …\nCreate a new fungible asset.\nReduce the active issuance by some amount.\nReduce the balance of <code>who</code> by <code>amount</code>.\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nMints <code>value</code> into the account of <code>who</code>, creating it as needed.\nDestroy all accounts associated with a given asset. …\nDestroy all approvals associated with a given asset up to …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nPrevent the balance of the account of <code>who</code> from being …\nComplete destroying asset and unreserve currency. …\nThe traits for putting freezes within a single fungible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDo something with the dust which has been destroyed from …\nCreate some dust and handle it with <code>Self::handle_dust</code>. …\nThe traits for putting holds within a single fungible …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance of <code>who</code> by <code>amount</code>.\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert <code>Dust</code> into an instance of <code>Credit</code>.\nIncrease the total issuance by <code>amount</code> and return the …\nInspect and Mutate traits for Asset metadata\nThe minimum balance any single account may have.\nIncrease the balance of <code>who</code> by exactly <code>amount</code>, minting new …\nProduce a pair of imbalances that cancel each other out …\nIncrease the active issuance by some amount, up to the …\nGet the maximum amount that <code>who</code> can withdraw/transfer …\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nReduce the total issuance by <code>amount</code> and return the …\nThe balance of <code>who</code> is increased in order to counter <code>credit</code>…\nAttempt to increase the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nInspect traits for Asset roles\nSimple infallible function to force an account to have a …\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nPrevent actions which would reduce the balance of the …\nSet the total issuance to <code>amount</code>.\nThe balance of <code>who</code> is decreased in order to counter <code>debt</code>. …\nAttempt to decrease the <code>asset</code> balance of <code>who</code> by <code>amount</code>.\nReduce the balance of some funds on hold in an account.\nStart the destruction an existing fungible asset.\nTake an <code>asset_id</code> and swap <code>amount_in</code> of the chain’s …\nTake an <code>asset_id</code> and swap some amount for <code>amount_out</code> of …\nRemove an existing lock.\nGet the total amount of funds whose ultimate bneficial …\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nThe total amount of issuance in the system.\nTransfer funds from one account into another.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nDrop an instance cleanly. Only works if its value …\nRemoves <code>value</code> balance from <code>who</code> account if possible.\nForcefully set the balance of <code>who</code> to <code>amount</code>.\nAn identifier for a freeze.\nTrait for inspecting a fungible asset which can be frozen. …\nTrait for introducing, altering and removing locks to …\nThe amount of the balance which can become frozen. …\nAmount of funds held in reserve by <code>who</code> for the given <code>id</code>.\nReturns <code>true</code> if it’s possible to introduce a freeze for …\nPrevent the balance of the account of <code>who</code> from being …\nPrevent actions which would reduce the balance of the …\nRemove an existing lock.\nTrait for slashing a fungible asset which can be place on …\nTrait for inspecting a fungible asset whose accounts …\nTrait for mutating a fungible asset which can be placed on …\nAn identifier for a hold. Used for disambiguating …\nA fungible, holdable token class where the balance on hold …\nAmount of funds on hold (for the given reason) of <code>who</code>.\nAttempt to decrease the balance of <code>who</code> which is held for …\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nReduce the balance on hold of <code>who</code> by <code>amount</code>.\nCheck to see if some <code>amount</code> of funds of <code>who</code> may be placed …\nHold some funds in an account. If a hold for <code>reason</code> is …\nReturns <code>true</code> if it’s possible to place (additional) …\nIncrease the balance on hold of <code>who</code> by <code>amount</code>.\nGet the maximum amount that the <code>total_balance_on_hold</code> of …\nRelease up to <code>amount</code> held funds in an account.\nForcefully set the balance on hold of <code>who</code> to <code>amount</code>. This …\nReduce the balance of some funds on hold in an account.\nAmount of funds on hold (for all hold reasons) of <code>who</code>.\nTransfer some <code>amount</code> of free balance from <code>source</code> to become …\nTransfer held funds into a destination account.\nThe AssetPool definition. Used as the KEY in the lending …\nThe price of the asset is not available\nThe storage to hold prices of assets w.r.t. other assets …\nThe borrow status of accounts (AccountId, …\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nEvents to inform users when important changes are made.\nType to access the Assets Pallet.\nCan be used to configure the genesis state of this pallet.\nThe ID already exists\nPrice of the asset can not be zero\nThe balance amount to supply is not valid\nThe balance amount to withdraw is not valid\nDefinition of the Lending Pool Reserve Entity\nLending Pool already activated\nLending Pool already deactivated\nLending Pool already exists\nLending Pool does not exist\nLending Pool is empty\nLending Pool is not active or has been deprecated\nKylix runtime storage items\nThe Loan being repaid does not exist\nThe minimum (starting) and maximum exchange rate allowed …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nType to access the Balances Pallet.\nThe user has not enough collateral assets\nThe user wants to withdraw more than allowed!\nThe user has not enough liquidity\nThe classic Overflow Error\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe accrued supply_index of accounts for assets\nKylix runtime storage items\nThe origin which can add or remove LendingPools and update …\nThis method returns the palled account id\nCalculates accrued deposit as accrued_deposit = deposit * …\nThe <code>activate_lending_pool</code> function allows a user to …\nSee <code>Pallet::activate_lending_pool</code>.\nThe <code>borrow</code> function allows a user to borrow liquidity from …\nSee <code>Pallet::borrow</code>.\nThe BORROW interest rate model calculated as\nThe <code>claim_rewards</code> function allows a user to claim their …\nSee <code>Pallet::claim_rewards</code>.\nThe <code>create_lending_pool</code> function allows a user to Create a …\nSee <code>Pallet::create_lending_pool</code>.\nThe <code>deactivate_lending_pool</code> function allows a user to …\nSee <code>Pallet::deactivate_lending_pool</code>.\nAuto-generated docs-only module listing all defined …\nThis method de-activates an existing lending pool\nThis method allows a user to withdraw liquidity from a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDefault interest rate model. TODO: change to a dynamic …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nself-explanatory helper methods\nAn auto-generated getter for <code>UnderlyingAssetStorage</code>.\nCalculate the loan amount max_loan_amount = …\nAn auto-generated getter for <code>MinMaxExchangeRate</code>.\nUpdate pool: move assets from reserved_balance to …\nUpdate pool: move assets from borrowed_balance …\nCreate a call with the variant <code>activate_lending_pool</code>.\nCreate a call with the variant <code>borrow</code>.\nCreate a call with the variant <code>claim_rewards</code>.\nCreate a call with the variant <code>create_lending_pool</code>.\nCreate a call with the variant <code>deactivate_lending_pool</code>.\nCreate a call with the variant <code>repay</code>.\nCreate a call with the variant <code>set_asset_price</code>.\nCreate a call with the variant <code>supply</code>.\nCreate a call with the variant <code>update_pool_kink</code>.\nCreate a call with the variant <code>update_pool_rate_model</code>.\nCreate a call with the variant <code>withdraw</code>.\nThe <code>repay</code> function allows a user to repay liquidity from a …\nSee <code>Pallet::repay</code>.\nCalculate the repayable amount including borrow interests _…\nAn auto-generated getter for <code>LendingPoolStorage</code>.\nCalculates scaled balance for borrow case as …\nCalculates scaled balance as scaled_balance = balance / …\nSets the price of one asset in terms of another asset.\nSee <code>Pallet::set_asset_price</code>.\nAuto-generated docs-only module listing all (public and …\nThe <code>supply</code> function allows a user to supply liquidity to a …\nSee <code>Pallet::supply</code>.\nThe SUPPLY interest rate model calculated as\nCalculates the new_mint amount as follows, let …\nThe <code>update_pool_kink</code> function allows a user to update the …\nSee <code>Pallet::update_pool_kink</code>.\nThe <code>update_pool_rate_model</code> function allows a user to …\nSee <code>Pallet::update_pool_rate_model</code>.\nUt -&gt; utilisation ratio calculated as borrowed_balance / …\nThe <code>withdraw</code> function allows a user to withdraw liquidity …\nSee <code>Pallet::withdraw</code>.\nThe <code>activate_lending_pool</code> function allows a user to …\nThe <code>borrow</code> function allows a user to borrow liquidity from …\nThe <code>claim_rewards</code> function allows a user to claim their …\nThe <code>create_lending_pool</code> function allows a user to Create a …\nThe <code>deactivate_lending_pool</code> function allows a user to …\nThe <code>repay</code> function allows a user to repay liquidity from a …\nSets the price of one asset in terms of another asset.\nThe <code>supply</code> function allows a user to supply liquidity to a …\nThe <code>update_pool_kink</code> function allows a user to update the …\nThe <code>update_pool_rate_model</code> function allows a user to …\nThe <code>withdraw</code> function allows a user to withdraw liquidity …\nThe storage to hold prices of assets w.r.t. other assets …\nThe borrow status of accounts (AccountId, …\nKylix runtime storage items\nThe minimum (starting) and maximum exchange rate allowed …\nThe accrued supply_index of accounts for assets\nKylix runtime storage items\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over a prefix of a child trie and decode raw_key …\nCommit the transaction.\nThe type that iterates over all <code>(key1, key2)</code>.\nA strongly-typed double map in storage whose secondary …\nA strongly-typed map in storage whose keys and values can …\nA strongly-typed map with arbitrary number of keys in …\nThe type that iterates over all <code>(key, value)</code>.\nThe type that iterates over all <code>(key1, key2, value)</code>.\nThe type that iterates over all …\nA type used exclusively by storage maps as their key type.\nThe type that itereates over all <code>key</code>s.\nThe type that iterates over all …\nUtility type for converting a storage map into a <code>Get&lt;u32&gt;</code> …\nIterate over a prefix and decode raw_key into <code>T</code>.\nThe type that iterates over all <code>key2</code>.\nIterate or drain over a prefix and decode raw_key and …\nThe type that iterates over all <code>(key2, value)</code>.\nTrait for specialising on removal logic of <code>PrefixIterator</code>.\nThe type that get/take return.\nThe type that get/take return.\nThe type that get/take returns.\nThe type that get/take returns.\nRollback the transaction.\nMarker trait that will be implemented for types that …\nMarker trait that will be implemented for types that …\nAn implementation of a map with a two keys.\nBuild the metadata of a storage.\nA strongly-typed map in storage.\nAn implementation of a map with an arbitrary number of …\nTrait for maps that store all its value after a unique …\nAn iterator that streams values directly from storage.\nMarker trait that is implemented for types that support …\nA trait for working with macro-generated storage values …\nDescribes on what should happen with a storage transaction.\nStorage double map that is capable of <code>StorageTryAppend</code>.\nStorage map that is capable of <code>StorageTryAppend</code>.\nStorage value that is capable of <code>StorageTryAppend</code>.\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nAppend the given item to the value in the storage.\nAppend the given items to the value in the storage.\nTraits, types and structs to support a bounded BTreeMap.\nTraits, types and structs to support a bounded <code>BTreeSet</code>.\nTraits, types and structs to support putting a bounded …\nBuild into <code>entries</code> the storage metadata entries of a …\nOperation on runtime child storages.\nAttempt to remove all items from the map.\nRemove all values under the first key <code>k1</code> in the overlay …\nAttempt to remove items from the map matching a <code>partial_key</code>…\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes the value (explicitly) exist in storage?\nDoes any value under the first key <code>k1</code> (explicitly) exist …\nDoes any value under a <code>partial_key</code> prefix (explicitly) …\nConverts to the same iterator but with the different ‘…\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nRead the length of the storage value without decoding the …\nDecode the length of the storage value at <code>key</code>.\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nRemove all elements from the map and iterate through them …\nMutate this iterator into a draining iterator; items …\nMutate this iterator into a draining iterator; items …\nMutate this iterator into a draining iterator; items …\nRemove all elements from the map with first key <code>k1</code> and …\nRemove all elements from the map with prefix key <code>kp</code> and …\nDoes the value (explicitly) exist in storage?\nFinal full prefix that prefixes all keys.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nLoad the value from the provided storage instance.\nLoad the value associated with the given key from the map.\nLoad the value associated with the given key from the …\nLoad the value associated with the given key from the map.\nOperation on runtime storage using hashed keys.\nGet the storage key.\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nGet the storage key used to fetch a value corresponding to …\nExecute the supplied function, ensuring we are at least in …\nStore a value to be associated with the given key from the …\nStore a value to be associated with the given keys from …\nStore a value to be associated with the given key from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into the inner type.\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map in lexicographical order …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all elements in the map after a specified …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> in …\nEnumerate all second keys <code>k2</code> in the map with the same …\nEnumerate all suffix keys in the map with prefix key <code>kp</code> …\nEnumerate all keys in the map in lexicographical order of …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map in lexicographical …\nEnumerate all keys in the map in lexicographical order of …\nEnumerate all keys in the map after a specified …\nEnumerate all keys <code>k1</code> and <code>k2</code> in the map after a specified …\nEnumerate all keys in the map after <code>starting_raw_key</code> in …\nEnumerate all elements in the map with first key <code>k1</code> in …\nEnumerate all elements in the map with prefix key <code>kp</code> in …\nEnumerate all elements in the map with first key <code>k1</code> after …\nEnumerate all elements in the map with prefix key <code>kp</code> after …\nIterate over values that share the first key.\nIterate over values that share the partial prefix key.\nIter over all value of the storage.\nClear the storage value.\nGet the last key that has been iterated upon and return it.\nGet the last key that has been iterated upon and return it.\nMigrate an item with the given <code>key</code> from a defunct <code>OldHasher</code>…\nMigrate an item with the given <code>key</code> from a <code>blake2_256</code> …\nMigrate an item with the given <code>key1</code> and <code>key2</code> from defunct …\nMigrate an item with the given <code>key</code> from defunct <code>hash_fns</code> …\nSome utilities for helping access storage with arbitrary …\nModule prefix. Used for generating final key.\nMutate the value\nMutate the value under a key.\nMutate the value under the given keys.\nMutate the value under a key.\nMutate the value. Deletes the item if mutated to a <code>None</code>.\nMutate the value under a key.\nMutate the value under the given keys. Deletes the item if …\nMutate the value under a key.\nMutate the value under a key if the value already exists. …\nCreates a new <code>PrefixIterator</code>, iterating after <code>previous_key</code> …\nCreates a new <code>KeyPrefixIterator</code>, iterating after …\nThis function is called whenever a key/value is removed.\nGet the prefix that is being iterated upon for this …\nGet the prefix that is being iterated upon for this …\nStore a value under this key into the provided storage …\nRemove the value under a key.\nRemove the value under the given keys.\nRemove the value under a key.\nRemove all values in the overlay and up to <code>limit</code> in the …\nRemove all values under the first key <code>k1</code> in the overlay …\nRemove all values starting with <code>partial_key</code> in the overlay …\nStore a value under this key into the provided storage …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nStore or remove the value to be associated with <code>key</code> so …\nSet the key that the iterator should start iterating after.\nSet the key that the iterator should start iterating after.\nContains the <code>crate::StorageNoopGuard</code> for conveniently …\nReturns the storage prefix for a specific pallet name and …\nStorage prefix. Used for generating final key.\nCreate the streaming iterator.\nSwap the values of two keys.\nSwap the values of two key-pairs.\nSwap the values of two keys.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nTake a value from storage, removing it afterwards.\nTake the value under a key.\nProvides functionality around the transaction storage.\nTranslate a value from some previous type (<code>O</code>) to the …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the values of all elements by a function <code>f</code>, in …\nTranslate the next entry following <code>previous_key</code> by a …\nTranslate the values of all elements by a function <code>f</code>, in …\nTry and append the <code>item</code> into the storage item.\nTry and append the <code>item</code> into the storage map at the given …\nTry and append the <code>item</code> into the storage double map at the …\nTry to get the underlying value from the provided storage …\nTry to get the value for the given key from the map.\nTry to get the value for the given key from the double map.\nTry to get the value for the given key from the map.\nMutate the value if closure returns <code>Ok</code>\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value under the given keys when the closure …\nMutate the item, only if an <code>Ok</code> value is returned.\nMutate the value if closure returns <code>Ok</code>. Deletes the item …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nMutate the item, only if an <code>Ok</code> value is returned. Deletes …\nStorage types to build abstraction on storage, they …\nOperation on unhashed runtime storage.\nTraits, types and structs to support putting a bounded …\nConstruct iterator to iterate over child trie items in …\nConstruct iterator to iterate over child trie items in …\nExecute the supplied function, adding a new storage layer.\nExecute the supplied function in a new storage transaction.\nSame as <code>with_transaction</code> but without a limit check on …\nA bounded map based on a B-Tree.\nGet the bound of the type in <code>usize</code>.\nClears the map, removing all elements.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn a mutable reference to the value corresponding to …\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeMap</code>.\nGets a mutable iterator over the entries of the map, …\nConsume the map, applying <code>f</code> to each of it’s values and …\nCreate a new <code>BoundedBTreeMap</code>.\nRemove a key from the map, returning the value at the key …\nRemove a key from the map, returning the value at the key …\nExactly the same semantics as <code>BTreeMap::retain</code>.\nExactly the same semantics as <code>BTreeMap::insert</code>, but …\nConsume the map, applying <code>f</code> to each of it’s values as …\nConsumes self and mutates self via the given <code>mutate</code> …\nA bounded set based on a B-Tree.\nGet the bound of the type in <code>usize</code>.\nClears the set, removing all elements.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeSet</code>.\nCreate a new <code>BoundedBTreeSet</code>.\nRemove an item from the set, returning whether it was …\nRemoves and returns the value in the set, if any, that is …\nExactly the same semantics as <code>BTreeSet::insert</code>, but …\nConsumes self and mutates self via the given <code>mutate</code> …\nA bounded slice.\nA bounded vector.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate an instance from the first elements of the given …\nAll keys to remove were removed, return number of …\nInformation related to a child state.\nType of child. It does not strictly define different child …\nThe outcome of calling <code>storage_kill</code>. Returned value is the …\nResults concerning an operation to remove many keys.\nThis is the one used by default.\nIf runtime module ensures that the child key is a unique …\nNot all key to remove were removed, return number of …\nDifferent possible state version.\nOld state version, no value nodes.\nNew state version can use value nodes.\nThe number of items removed from the backend database.\nReturns the type for this child info.\nPartially clear the child storage of each key-value pair.\nDeconstruct into the internal components.\nCheck to see if <code>key</code> has an explicit entry in storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nTransform a prefixed key into a tuple of the child type …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturn the value of the item in storage under <code>key</code>, or <code>None</code> …\nReturn the value of the item in storage under <code>key</code>, or …\nReturn the value of the item in storage under <code>key</code>, or the …\nReturn the value of the item in storage under <code>key</code>, or …\nGet a Vec of bytes from storage.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a the full location in the direct parent of this …\nReturns byte sequence (keyspace) that can be use by …\nEnsure <code>key</code> has no explicit entry in storage.\nRemove all <code>storage_key</code> key/values\nReturn the length in bytes of the value without reading …\nThe number of iterations (each requiring a storage …\nA continuation cursor which, if <code>Some</code> must be provided to …\nTry to get a child type from its <code>u32</code> representation.\nInstantiates child information for a default child trie of …\nSame as <code>new_default</code> but with <code>Vec&lt;u8&gt;</code> as input.\nReturns the location reserved for this child trie in their …\nReturn a the full location in the direct parent of this …\nPut <code>value</code> in storage under <code>key</code>.\nPut a raw byte slice into storage.\nCalculate current child root value.\nIf defined, values in state of size bigger or equal to …\nReturns a reference to the location in the direct parent of\nRemove <code>key</code> from storage, returning its value if it had an …\nReturn the value of the item in storage under <code>key</code>, or …\nRemove <code>key</code> from storage, returning its value, or, if there …\nReturn the value of the item in storage under <code>key</code>, or …\nTry to update with another instance, return false if both …\nThe number of unique keys removed, taking into account …\nCheck to see if <code>key</code> has an explicit entry in storage.\nReturn the value of the item in storage under <code>key</code>, or <code>None</code> …\nReturn the value of the item in storage under <code>key</code>, or …\nReturn the value of the item in storage under <code>key</code>, or the …\nReturn the value of the item in storage under <code>key</code>, or …\nGet a Vec of bytes from storage.\nEnsure <code>key</code> has no explicit entry in storage.\nPut <code>value</code> in storage under <code>key</code>.\nPut a raw byte slice into storage.\nRemove <code>key</code> from storage, returning its value if it had an …\nReturn the value of the item in storage under <code>key</code>, or …\nRemove <code>key</code> from storage, returning its value, or, if there …\nReturn the value of the item in storage under <code>key</code>, or …\nUtility to iterate through raw items in storage.\nUtility to iterate through raw items in storage.\nAttempt to remove all values under a storage prefix by the …\nMutate this iterator into a draining iterator; items …\nMutate this iterator into a draining iterator; items …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a particular value in storage by the <code>module</code>, the map’…\nGet a particular value in storage by the <code>module</code>, the map’…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMove all storages from a pallet prefix to another pallet …\nMove all <code>(key, value)</code> after some prefix to the another …\nMove a storage from a pallet prefix to another pallet …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nPut a particular value into storage by the <code>module</code>, the map…\nRemove all items under a storage prefix by the <code>module</code>, the …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nTake a particular item in storage by the <code>module</code>, the map’…\nTake a particular value in storage by the <code>module</code>, the map…\nConstruct iterator to iterate over map items in <code>module</code> for …\nConstruct iterator to iterate over map items in <code>module</code> for …\nAsserts that no storage changes took place between con- …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nThe type that is being used to store the current number of …\nThe maximum number of nested layers.\nThe key that is holds the current number of active layers.\nExecute the supplied function, ensuring we are at least in …\nCheck if the current call is within a transactional layer.\nExecute the supplied function, adding a new storage layer.\nExecute the supplied function in a new storage transaction.\nSame as <code>with_transaction</code> but without a limit check on …\nA wrapper around a <code>StorageMap</code> and a <code>StorageValue&lt;Value=u32&gt;</code>…\nThe requirement for an instance of <code>CountedStorageMap</code>.\nThe prefix to use for the counter storage value.\nMarker trait to indicate that each element in the tuple …\nTrait indicating whether a KeyGenerator has the prefix P.\nTrait indicating whether a ReversibleKeyGenerator has the …\nA type used exclusively by storage maps as their key type.\nA trait that contains the current key as an associated …\nThe maximum length used by the key in storage.\nMetadata for the storage kind.\nImplement QueryKindTrait with query being <code>Option&lt;Value&gt;</code>\nType returned on query\nTrait implementing how the storage optional value is …\nImplement QueryKindTrait with query being …\nA trait that indicates the hashers for the keys generated …\nA type that allow to store values for <code>(key1, key2)</code> couple. …\nBuild the metadata of a storage.\nA type that allow to store value for given key. Allowing …\nA type that allow to store values for an arbitrary number …\nA type that allow to store a value.\nTrait to indicate that a tuple can be converted into an …\nImplement QueryKindTrait with query being <code>Value</code>\nBuild into <code>entries</code> the storage metadata entries of a …\nGiven a <code>key</code> tuple, calculate the final key by encoding …\nConvert an optional value (i.e. some if trie contains the …\nConvert a query to an optional value.\nGiven a <code>key</code> tuple, migrate the keys from using the old …\nPartially clear the storage of all keys under a common …\nReturns <code>true</code> if the storage contains any key, which starts …\nCheck to see if <code>key</code> has an explicit entry in storage.\nReturn the value of the item in storage under <code>key</code>, or <code>None</code> …\nReturn the value of the item in storage under <code>key</code>, or …\nReturn the value of the item in storage under <code>key</code>, or the …\nReturn the value of the item in storage under <code>key</code>, or …\nGet a Vec of bytes from storage.\nEnsure <code>key</code> has no explicit entry in storage.\nEnsure keys with the given <code>prefix</code> have no entries in …\nPut <code>value</code> in storage under <code>key</code>.\nPut a raw byte slice into storage.\nRemove <code>key</code> from storage, returning its value if it had an …\nReturn the value of the item in storage under <code>key</code>, or …\nRemove <code>key</code> from storage, returning its value, or, if there …\nReturn the value of the item in storage under <code>key</code>, or …\nA weakly bounded vector.\nGet the bound of the type in <code>usize</code>.\nCreate <code>Self</code> from <code>t</code> without any checks. Logs warnings if …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nExactly the same semantics as <code>slice::get_mut</code>.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nExactly the same semantics as <code>Vec::remove</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nExactly the same semantics as <code>Vec::swap_remove</code>.\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConsumes self and mutates self via the given <code>mutate</code> …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nWeights for pallet_template using the Substrate node and …\nWeight functions needed for pallet_template.\nStorage: TemplateModule Something (r:1 w:1) Proof: …\nStorage: TemplateModule Something (r:0 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.")